<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<module>
	<elements>
		<element id="0" moduleName="ALU" textX="109" textY="116" 
				 type="GUI.Design.ChipRectangule" 
				 x="56" x2="185" y="40" y2="105">
			<param>ALU</param>
			<port id="0" isOutput="false" isVertical="false" leftOrBottom="true" 
				  portName="operand1" position="0"/>
			<port id="0" isOutput="false" isVertical="false" leftOrBottom="true" 
				  portName="operand2" position="2"/>
			<port id="0" isOutput="false" isVertical="false" leftOrBottom="true" 
				  portName="ALU_Control" position="4"/>
			<port id="0" isOutput="true" isVertical="false" leftOrBottom="false" 
				  portName="result" position="0"/>
			<port id="0" isOutput="true" isVertical="false" leftOrBottom="false" 
				  portName="zero" position="2"/>
			<port id="0" isOutput="true" isVertical="false" leftOrBottom="false" 
				  portName="overflow" position="4"/>
		</element>
	</elements>
	<behaviour>
	//////////////////////////////////////////////////////////////////////////////////
	// Company: 
	// Engineer: 
	// 
	// Create Date:    18:51:05 05/15/2012 
	// Design Name: 
	// Module Name:    ALU 
	// Project Name: 
	// Target Devices: 
	// Tool versions: 
	// Description: 
	//
	// Dependencies: 
	//
	// Revision: 
	// Revision 0.01 - File Created
	// Additional Comments: 
	//
	//////////////////////////////////////////////////////////////////////////////////
	module ALU(
		input [15:0] operand1,
		input [15:0] operand2,
		input [2:0] ALU_Control,
		output reg [15:0] result,
		output reg zero,
		output reg overflow
		);
		 
		 always @ (operand1 or operand2 or ALU_Control)
		 begin
			case(ALU_Control)
				3'b000:
					{overflow,result} = operand1 + operand2;
				
				3'b001:
					{overflow,result} = operand1 - operand2;
				
				3'b010:
					result = operand1 * operand2;
				
				3'b011:
					result = operand1 &amp; operand2;
				
				3'b100:
					result = operand1 | operand2;
				
				3'b101: //seq
					result = (operand1==operand2)?1:0;
					
				3'b110: //slt
					result = operand1&lt;operand2?1:0;
				
				3'b111: //sne
					result = (operand1!=operand2)?1:0;
			endcase
			zero = (result==16'b0)?1:0;
		 end


	endmodule
	</behaviour>
</module>


