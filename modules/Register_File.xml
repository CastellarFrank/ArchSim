<?xml version="1.0" encoding="UTF-8" standalone="no"?><module><elements><element id="0" type="Simulation.Elements.Wire" x="280" x2="328" y="128" y2="128"/><element id="0" type="Simulation.Elements.Wire" x="280" x2="328" y="152" y2="152"/><element id="0" type="Simulation.Elements.Wire" x="280" x2="328" y="168" y2="168"/><element id="0" type="Simulation.Elements.Wire" x="280" x2="328" y="192" y2="192"/><element id="0" type="Simulation.Elements.Wire" x="280" x2="328" y="208" y2="208"/><element id="0" type="Simulation.Elements.Wire" x="232" x2="280" y="232" y2="232"/><element id="0" type="Simulation.Elements.Wire" x="208" x2="256" y="248" y2="248"/><element id="0" type="Simulation.Elements.Wire" x="240" x2="288" y="272" y2="272"/><element id="0" type="Simulation.Elements.Wire" x="240" x2="288" y="288" y2="288"/><element id="0" type="Simulation.Elements.Wire" x="192" x2="240" y="312" y2="312"/></elements><behaviour>//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    21:15:38 05/15/2012 
// Design Name: 
// Module Name:    Register_File 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module Register_File(input RegWrite,
				input [2:0] Read_Addr1,
				input [2:0] Read_Addr2,
				input [2:0] Write_Addr,
				input [15:0] Write_Data,
				output reg [15:0] Read_Data1,
				output reg [15:0] Read_Data2,
				input clk,
				
				input [2:0] regNumber,
				output reg [15:0] regValue
    );
	 
	 reg [15:0] registers[7:0];
	 	 
	 always @ (posedge clk)
	 begin
		if(RegWrite == 1)
			registers[Write_Addr] = Write_Data;
	 end
	 
	 always @ (Read_Addr1 or Read_Addr2 or clk or regNumber)
	 begin
		Read_Data1 &lt;= registers[Read_Addr1];
		Read_Data2 &lt;= registers[Read_Addr2];
		regValue = registers[regNumber];
	 end

endmodule
</behaviour></module>