/* The following code was generated by JFlex 1.4.3 on 2/02/14 16:23 */

package VerilogCompiler;  

import java_cup.runtime.*;
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/02/14 16:23 from the specification file
 * <tt>C:/Users/Alejandro/Documents/GitHub/GradProjectJava/src/VerilogCompiler/VerilogLexer.flex</tt>
 */
public class VerilogLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\23\1\71\1\22"+
    "\1\34\2\22\1\67\1\10\1\37\1\40\1\25\1\35\1\31\1\4"+
    "\1\22\1\24\1\65\1\7\6\5\2\5\1\33\1\30\1\73\1\36"+
    "\1\72\1\26\1\32\1\6\1\16\1\6\1\12\2\6\1\21\1\20"+
    "\6\21\1\14\10\21\1\6\1\21\1\6\1\43\1\22\1\44\1\75"+
    "\1\6\1\22\1\45\1\15\1\56\1\11\1\55\1\57\1\54\1\17"+
    "\1\53\2\21\1\46\1\62\1\52\1\13\1\27\1\21\1\63\1\51"+
    "\1\61\1\60\1\64\1\47\1\66\1\50\1\6\1\41\1\70\1\42"+
    "\1\74\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\3\5"+
    "\1\6\1\7\1\10\1\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\14\5\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\5\1\42"+
    "\1\5\2\0\2\5\1\43\15\5\1\44\12\5\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\4\5"+
    "\2\0\4\5\1\55\1\56\6\5\1\57\10\5\1\60"+
    "\1\5\1\61\3\5\1\62\1\63\1\5\1\64\1\65"+
    "\4\5\1\2\5\5\1\66\1\67\1\70\2\5\1\71"+
    "\5\5\1\72\1\73\2\5\1\74\4\5\1\75\3\5"+
    "\1\76\4\5\1\77\3\5\1\100\1\101\12\5\1\102"+
    "\2\5\1\103\1\104\1\105\10\5\1\106\1\107\1\5"+
    "\1\110\1\111\1\5\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\5\1\120\1\5\1\121\2\5\1\122\1\123"+
    "\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\76\0\76\0\272\0\370\0\u0136"+
    "\0\u0174\0\u01b2\0\u01f0\0\u022e\0\76\0\76\0\u026c\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u02aa\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\76\0\76\0\76\0\76\0\u07c0\0\u07fe\0\370\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\76\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\370\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\76\0\76\0\76"+
    "\0\76\0\u0f04\0\76\0\u0f42\0\76\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\174\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\370"+
    "\0\370\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\370"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\370\0\370"+
    "\0\u1686\0\76\0\76\0\u16c4\0\u1702\0\u1740\0\u177e\0\u08b8"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\370\0\370\0\370"+
    "\0\u18f2\0\u1930\0\370\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\370\0\370\0\u1aa4\0\u1ae2\0\370\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\370\0\u1c18\0\u1c56\0\u1c94\0\370\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\370\0\u1dca\0\u1e08\0\u1e46\0\370\0\370"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\370\0\u20f0\0\u212e\0\370\0\370\0\370"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\370\0\370\0\u235c\0\370\0\370\0\u239a\0\370\0\370"+
    "\0\370\0\370\0\370\0\370\0\u23d8\0\370\0\u2416\0\370"+
    "\0\u2454\0\u2492\0\370\0\370\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\11\1\7\1\12\1\7\1\13\4\7\1\2\1\4"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\7\1\36\1\7\1\37\1\40\1\41"+
    "\1\7\1\42\1\43\1\44\1\45\1\7\1\46\1\47"+
    "\1\7\1\6\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\100\0\1\4\100\0\1\6\1\60\1\6"+
    "\1\0\2\60\2\0\2\60\26\0\1\60\7\0\3\60"+
    "\5\0\1\6\1\60\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\22\7\20\0\2\61\2\62\2\63\2\64"+
    "\62\0\3\7\1\0\11\7\5\0\1\7\15\0\10\7"+
    "\1\65\11\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\13\7\1\66\2\7\1\67\3\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\10\7\1\70\11\7"+
    "\33\0\1\71\1\72\55\0\3\7\1\0\2\7\1\73"+
    "\6\7\5\0\1\7\15\0\1\74\21\7\45\0\1\75"+
    "\44\0\3\7\1\0\11\7\5\0\1\7\15\0\1\7"+
    "\1\76\2\7\1\77\1\100\14\7\14\0\3\7\1\0"+
    "\2\7\1\101\3\7\1\102\2\7\5\0\1\7\15\0"+
    "\1\103\5\7\1\104\13\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\6\7\1\105\4\7\1\106\6\7"+
    "\14\0\3\7\1\0\2\7\1\107\6\7\5\0\1\7"+
    "\15\0\1\110\7\7\1\111\11\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\5\7\1\112\4\7\1\113"+
    "\7\7\14\0\3\7\1\0\1\114\10\7\5\0\1\7"+
    "\15\0\1\7\1\115\3\7\1\116\14\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\1\117\21\7\14\0"+
    "\3\7\1\0\2\7\1\120\6\7\5\0\1\7\15\0"+
    "\22\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\5\7\1\121\14\7\14\0\3\7\1\0\2\7\1\122"+
    "\6\7\5\0\1\7\15\0\22\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\10\7\1\123\11\7\14\0"+
    "\3\7\1\0\2\7\1\124\6\7\5\0\1\7\15\0"+
    "\5\7\1\125\14\7\76\0\1\126\76\0\1\127\43\0"+
    "\1\130\75\0\1\131\33\0\1\132\41\0\1\133\34\0"+
    "\1\134\77\0\1\135\74\0\1\135\6\0\3\60\1\0"+
    "\2\60\2\0\2\60\26\0\1\60\7\0\3\60\5\0"+
    "\2\60\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\1\136\11\7\1\137\7\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\14\7\1\140\5\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\7\7\1\141\12\7"+
    "\10\0\1\142\1\4\1\0\72\71\2\0\1\72\1\0"+
    "\21\72\1\143\50\72\5\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\4\7\1\144\15\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\16\7\1\145\3\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\2\7\1\146"+
    "\17\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\4\7\1\147\15\7\14\0\3\7\1\0\1\150\10\7"+
    "\5\0\1\7\15\0\22\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\16\7\1\151\3\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\6\7\1\152\13\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\5\7"+
    "\1\153\1\154\13\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\16\7\1\155\3\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\7\7\1\156\12\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\157\15\0\22\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\16\7\1\160"+
    "\3\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\5\7\1\161\14\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\7\7\1\162\12\7\14\0\3\7\1\0"+
    "\2\7\1\163\6\7\5\0\1\164\15\0\6\7\1\165"+
    "\5\7\1\166\5\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\7\7\1\167\12\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\4\7\1\170\15\7\14\0"+
    "\3\7\1\0\1\171\10\7\5\0\1\7\15\0\22\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\4\7"+
    "\1\172\15\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\16\7\1\173\3\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\4\7\1\174\15\7\14\0\3\7"+
    "\1\0\1\175\10\7\5\0\1\7\15\0\22\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\176\15\0\7\7\1\177"+
    "\12\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\16\7\1\200\3\7\14\0\3\7\1\0\2\7\1\201"+
    "\6\7\5\0\1\7\15\0\22\7\101\0\1\202\76\0"+
    "\1\203\7\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\4\7\1\204\15\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\1\205\21\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\206\15\0\22\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\6\7\1\207\13\7\11\0\1\72"+
    "\1\0\20\72\1\210\1\143\50\72\5\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\10\7\1\211\11\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\1\212\21\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\1\213"+
    "\21\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\6\7\1\214\13\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\1\7\1\215\20\7\14\0\3\7\1\0"+
    "\1\216\10\7\5\0\1\7\15\0\22\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\14\7\1\217\5\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\10\7"+
    "\1\220\11\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\5\7\1\221\14\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\222\15\0\22\7\14\0\3\7\1\0\1\223"+
    "\10\7\5\0\1\7\15\0\22\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\10\7\1\224\11\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\13\7\1\225"+
    "\6\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\13\7\1\226\6\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\14\7\1\227\5\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\10\7\1\230\11\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\10\7\1\231"+
    "\11\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\10\7\1\232\11\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\11\7\1\233\3\7\1\234\4\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\10\7\1\235"+
    "\11\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\10\7\1\236\11\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\6\7\1\237\13\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\13\7\1\240\6\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\10\7\1\241"+
    "\11\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\16\7\1\242\3\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\4\7\1\243\15\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\13\7\1\244\6\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\13\7\1\245"+
    "\6\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\5\7\1\246\14\7\14\0\3\7\1\0\1\247\10\7"+
    "\5\0\1\7\15\0\22\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\15\7\1\250\4\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\3\7\1\251\16\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\7\7"+
    "\1\252\12\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\10\7\1\253\11\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\10\7\1\254\11\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\1\7\1\255\20\7"+
    "\14\0\3\7\1\0\1\256\10\7\5\0\1\7\15\0"+
    "\22\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\14\7\1\257\5\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\14\7\1\260\5\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\6\7\1\261\13\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\7\7\1\262"+
    "\12\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\1\263\21\7\14\0\3\7\1\0\2\7\1\264\6\7"+
    "\5\0\1\7\15\0\22\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\17\7\1\265\2\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\7\7\1\266\12\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\1\7"+
    "\1\267\20\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\1\270\21\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\6\7\1\271\13\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\1\7\1\272\20\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\14\7\1\273"+
    "\5\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\7\7\1\274\12\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\10\7\1\275\11\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\4\7\1\276\15\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\5\7\1\277"+
    "\14\7\14\0\3\7\1\0\1\300\10\7\5\0\1\7"+
    "\15\0\22\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\3\7\1\301\16\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\7\7\1\302\12\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\1\303\21\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\10\7\1\304"+
    "\11\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\4\7\1\305\15\7\14\0\3\7\1\0\1\306\10\7"+
    "\5\0\1\7\15\0\22\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\10\7\1\307\11\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\5\7\1\310\14\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\10\7"+
    "\1\311\11\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\14\7\1\312\5\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\7\7\1\313\12\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\14\7\1\314\5\7"+
    "\14\0\3\7\1\0\11\7\5\0\1\7\15\0\10\7"+
    "\1\315\11\7\14\0\3\7\1\0\11\7\5\0\1\7"+
    "\15\0\14\7\1\316\5\7\14\0\2\7\1\317\1\0"+
    "\11\7\5\0\1\7\15\0\20\7\1\320\1\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\10\7\1\321"+
    "\11\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\1\7\1\322\20\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\16\7\1\323\3\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\10\7\1\324\11\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\13\7\1\325"+
    "\6\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\16\7\1\326\3\7\14\0\3\7\1\0\11\7\5\0"+
    "\1\7\15\0\10\7\1\327\11\7\14\0\3\7\1\0"+
    "\11\7\5\0\1\7\15\0\5\7\1\330\14\7\14\0"+
    "\3\7\1\0\11\7\5\0\1\7\15\0\10\7\1\331"+
    "\11\7\14\0\3\7\1\0\11\7\5\0\1\7\15\0"+
    "\1\7\1\332\20\7\14\0\3\7\1\0\1\333\10\7"+
    "\5\0\1\7\15\0\22\7\14\0\3\7\1\0\11\7"+
    "\5\0\1\7\15\0\16\7\1\334\3\7\14\0\3\7"+
    "\1\0\11\7\5\0\1\7\15\0\10\7\1\335\11\7"+
    "\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\7\1\2\11\1\1\6\11"+
    "\1\1\6\11\24\1\4\11\4\1\2\0\2\1\1\11"+
    "\30\1\4\11\1\1\1\11\1\1\1\11\4\1\2\0"+
    "\36\1\2\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
   
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VerilogLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public VerilogLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return symbol(sym.OP_TIMES);
          }
        case 85: break;
        case 55: 
          { return symbol(sym.KW_WAIT);
          }
        case 86: break;
        case 69: 
          { return symbol(sym.KW_SIGNED);
          }
        case 87: break;
        case 58: 
          { return symbol(sym.KW_EDGE);
          }
        case 88: break;
        case 35: 
          { return symbol(sym.REL_EQ);
          }
        case 89: break;
        case 67: 
          { return symbol(sym.KW_ALWAYS);
          }
        case 90: break;
        case 22: 
          { return symbol(sym.BIT_AND);
          }
        case 91: break;
        case 48: 
          { return symbol(sym.KW_END);
          }
        case 92: break;
        case 51: 
          { return symbol(sym.KW_XOR);
          }
        case 93: break;
        case 30: 
          { return symbol(sym.DECIMAL_BASE);
          }
        case 94: break;
        case 24: 
          { return symbol(sym.LOG_NEG);
          }
        case 95: break;
        case 62: 
          { return symbol(sym.KW_BEGIN);
          }
        case 96: break;
        case 9: 
          { return symbol(sym.SEMICOLON);
          }
        case 97: break;
        case 56: 
          { return symbol(sym.KW_WIRE);
          }
        case 98: break;
        case 57: 
          { return symbol(sym.KW_NAND);
          }
        case 99: break;
        case 12: 
          { return symbol(sym.COLON);
          }
        case 100: break;
        case 5: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 101: break;
        case 34: 
          { return symbol(sym.KW_OR);
          }
        case 102: break;
        case 46: 
          { return symbol(sym.KW_WOR);
          }
        case 103: break;
        case 44: 
          { return symbol(sym.BIT_XNOR);
          }
        case 104: break;
        case 27: 
          { return symbol(sym.BIT_NEG);
          }
        case 105: break;
        case 50: 
          { return symbol(sym.KW_REG);
          }
        case 106: break;
        case 41: 
          { return symbol(sym.R_SHIFT);
          }
        case 107: break;
        case 13: 
          { return symbol(sym.SHARP);
          }
        case 108: break;
        case 23: 
          { return symbol(sym.BIT_OR);
          }
        case 109: break;
        case 28: 
          { return symbol(sym.BIT_XOR);
          }
        case 110: break;
        case 29: 
          { return symbol(sym.HEX_NUMBER, new String(yytext()));
          }
        case 111: break;
        case 68: 
          { return symbol(sym.KW_ASSIGN);
          }
        case 112: break;
        case 10: 
          { return symbol(sym.COMMA);
          }
        case 113: break;
        case 20: 
          { return symbol(sym.L_BRACKET);
          }
        case 114: break;
        case 19: 
          { return symbol(sym.R_CURLY);
          }
        case 115: break;
        case 76: 
          { return symbol(sym.KW_NEGEDGE);
          }
        case 116: break;
        case 80: 
          { return symbol(sym.KW_FOREVER);
          }
        case 117: break;
        case 83: 
          { return symbol(sym.KW_PARAMETER);
          }
        case 118: break;
        case 70: 
          { return symbol(sym.KW_MODULE);
          }
        case 119: break;
        case 79: 
          { return symbol(sym.KW_ENDCASE);
          }
        case 120: break;
        case 49: 
          { return symbol(sym.KW_FOR);
          }
        case 121: break;
        case 40: 
          { return symbol(sym.REL_GRTEQ);
          }
        case 122: break;
        case 3: 
          { return symbol(sym.OP_MINUS);
          }
        case 123: break;
        case 36: 
          { return symbol(sym.KW_IF);
          }
        case 124: break;
        case 43: 
          { return symbol(sym.L_SHIFT);
          }
        case 125: break;
        case 4: 
          { return symbol(sym.UNSIGNED_NUMBER, new Long(yytext()));
          }
        case 126: break;
        case 8: 
          { return symbol(sym.QUESTION_MARK);
          }
        case 127: break;
        case 66: 
          { return symbol(sym.KW_OUTPUT);
          }
        case 128: break;
        case 82: 
          { return symbol(sym.KW_UNSIGNED);
          }
        case 129: break;
        case 25: 
          { return symbol(sym.REL_GRT);
          }
        case 130: break;
        case 6: 
          { return symbol(sym.OP_DIV);
          }
        case 131: break;
        case 14: 
          { return symbol(sym.OP_ADD);
          }
        case 132: break;
        case 18: 
          { return symbol(sym.L_CURLY);
          }
        case 133: break;
        case 54: 
          { return symbol(sym.KW_WAND);
          }
        case 134: break;
        case 26: 
          { return symbol(sym.REL_LST);
          }
        case 135: break;
        case 81: 
          { return symbol(sym.KW_DEASSIGN);
          }
        case 136: break;
        case 2: 
          { /* just skip what was found, do nothing */
          }
        case 137: break;
        case 60: 
          { return symbol(sym.KW_CASE);
          }
        case 138: break;
        case 65: 
          { return symbol(sym.KW_INPUT);
          }
        case 139: break;
        case 71: 
          { return symbol(sym.KW_REPEAT);
          }
        case 140: break;
        case 39: 
          { return symbol(sym.REL_NOTEQ);
          }
        case 141: break;
        case 42: 
          { return symbol(sym.REL_LSTEQ);
          }
        case 142: break;
        case 72: 
          { return symbol(sym.KW_DEFAULT);
          }
        case 143: break;
        case 52: 
          { return symbol(sym.R_ARIT_SHIFT);
          }
        case 144: break;
        case 21: 
          { return symbol(sym.R_BRACKET);
          }
        case 145: break;
        case 73: 
          { return symbol(sym.KW_POSEDGE);
          }
        case 146: break;
        case 38: 
          { return symbol(sym.LOG_OR);
          }
        case 147: break;
        case 16: 
          { return symbol(sym.L_PARENTHESIS);
          }
        case 148: break;
        case 45: 
          { return symbol(sym.KW_AND);
          }
        case 149: break;
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 150: break;
        case 59: 
          { return symbol(sym.KW_ELSE);
          }
        case 151: break;
        case 37: 
          { return symbol(sym.LOG_AND);
          }
        case 152: break;
        case 77: 
          { return symbol(sym.KW_INITIAL);
          }
        case 153: break;
        case 53: 
          { return symbol(sym.L_ARIT_SHIFT);
          }
        case 154: break;
        case 74: 
          { return symbol(sym.KW_SUPPLY1);
          }
        case 155: break;
        case 64: 
          { return symbol(sym.KW_INOUT);
          }
        case 156: break;
        case 11: 
          { return symbol(sym.AT_SIGN);
          }
        case 157: break;
        case 31: 
          { return symbol(sym.OCTAL_BASE);
          }
        case 158: break;
        case 17: 
          { return symbol(sym.R_PARENTHESIS);
          }
        case 159: break;
        case 63: 
          { return symbol(sym.KW_WHILE);
          }
        case 160: break;
        case 78: 
          { return symbol(sym.KW_INTEGER);
          }
        case 161: break;
        case 75: 
          { return symbol(sym.KW_SUPPLY0);
          }
        case 162: break;
        case 61: 
          { return symbol(sym.KW_XNOR);
          }
        case 163: break;
        case 33: 
          { return symbol(sym.HEX_BASE);
          }
        case 164: break;
        case 47: 
          { return symbol(sym.KW_NOR);
          }
        case 165: break;
        case 15: 
          { return symbol(sym.EQUALS);
          }
        case 166: break;
        case 84: 
          { return symbol(sym.KW_ENDMODULE);
          }
        case 167: break;
        case 32: 
          { return symbol(sym.BINARY_BASE);
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
