/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Simulation.Elements.Gates.AndGate;
import Simulation.Elements.Gates.NandGate;
import Simulation.Elements.Gates.NorGate;
import Simulation.Elements.Gates.NotGate;
import Simulation.Elements.Gates.OrGate;
import Simulation.Elements.Gates.XnorGate;
import Simulation.Elements.Gates.XorGate;
import Simulation.Elements.Inputs.ClockInput;
import Simulation.Elements.Inputs.LogicInput;
import Simulation.Elements.Inputs.MultiBitsInput;
import Simulation.Elements.ModuleChip;
import Simulation.Elements.Outputs.LogicOutput;
import Simulation.Elements.Outputs.MultiBitsOutput;
import Simulation.Elements.Wire;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JTree;
import javax.swing.TransferHandler;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Franklin
 */
public class DesignElementsTreeView extends javax.swing.JInternalFrame {

    MainWindow parent;
    DefaultMutableTreeNode moduleSection;
    /**
     * Creates new form ElementsTreeView
     * @param mainWindow
     */
    public DesignElementsTreeView(MainWindow mainWindow) {
        this.parent = mainWindow;
        initComponents();
        this.initializeTreeView();
        
        int positionX = this.parent.getWidth() - this.getWidth() - 18;
        this.setLocation(positionX, 0);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeElement = new javax.swing.JTree();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setResizable(true);
        setTitle("Design Palette");

        jScrollPane1.setViewportView(treeElement);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );

        setBounds(0, 0, 250, 550);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree treeElement;
    // End of variables declaration//GEN-END:variables

    void updateModuleSection(List<MenuInfo> moduleMenus) {
        this.moduleSection.removeAllChildren();
        
        for(MenuInfo menu : moduleMenus){
            DefaultMutableTreeNode menuElement = getTreeNodeFromMenuInfo(menu);
            if(menuElement != null)
                this.moduleSection.add(menuElement);
        }
    }
    
    DefaultMutableTreeNode getTreeNodeFromMenuInfo(MenuInfo menu){
        if(menu == null)
            return null;
        
        if(menu.isMenuItem){
            return new DesignElementTreeNode(menu.label, ModuleChip.class.getName(), menu.label);
        }else{
            DefaultMutableTreeNode subFolder = new DefaultMutableTreeNode(menu.label);
            this.moduleSection.add(subFolder);
            for(MenuInfo menuItem : menu.children){
                DefaultMutableTreeNode childMenu = this.getTreeNodeFromMenuInfo(menuItem);
                if(childMenu != null)
                    subFolder.add(childMenu);
            }
            return subFolder;
        }
    }

    private void initializeTreeView() {
        this.treeElement.removeAll();
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Design Elements");
        DefaultMutableTreeNode basicSection = new DefaultMutableTreeNode("Simple");
        this.moduleSection = new DefaultMutableTreeNode("Modules");
        DefaultMutableTreeNode inputSection = new DefaultMutableTreeNode("Input");
        DefaultMutableTreeNode outPutSection = new DefaultMutableTreeNode("Output");
        DefaultMutableTreeNode gatesSection = new DefaultMutableTreeNode("Gates");
        
        //Basic Section
        basicSection.add(new DesignElementTreeNode("Wire", Wire.class.getName(), null));
        basicSection.add(new DesignElementTreeNode("Inverter", NotGate.class.getName(), null));
        
        //Input Section
        inputSection.add(new DesignElementTreeNode("I-Logic", LogicInput.class.getName(), null));
        inputSection.add(new DesignElementTreeNode("I-MultiBits ", MultiBitsInput.class.getName(), "z"));
        inputSection.add(new DesignElementTreeNode("I-Clock", ClockInput.class.getName(), null));
        
        //Output Section
        outPutSection.add(new DesignElementTreeNode("O-Logic", LogicOutput.class.getName(), null));
        outPutSection.add(new DesignElementTreeNode("O-MultiBits", MultiBitsOutput.class.getName(), "z"));
        
        //Gates Section
        gatesSection.add(new DesignElementTreeNode("And", AndGate.class.getName(), "2"));
        gatesSection.add(new DesignElementTreeNode("Nand", NandGate.class.getName(), "2"));
        gatesSection.add(new DesignElementTreeNode("Nor", NorGate.class.getName(), "2"));
        gatesSection.add(new DesignElementTreeNode("Or", OrGate.class.getName(), "2"));
        gatesSection.add(new DesignElementTreeNode("Xnor", XnorGate.class.getName(), "2"));
        gatesSection.add(new DesignElementTreeNode("Xor", XorGate.class.getName(), "2"));
        
        rootNode.add(basicSection);
        rootNode.add(this.moduleSection);
        rootNode.add(inputSection);
        rootNode.add(outPutSection);
        rootNode.add(gatesSection);
        
        this.treeElement.setModel(new DefaultTreeModel(rootNode));
        this.treeElement.setDragEnabled(true);
        this.treeElement.setRootVisible(false);
        this.treeElement.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        renderer.setLeafIcon(this.getResizedImageIcon());
        this.treeElement.setCellRenderer(renderer);
        this.treeElement.setTransferHandler(new TransferHandler(null) {
            @Override
            public int getSourceActions(JComponent c) {
                return COPY;
            }

            @Override
            protected Transferable createTransferable(JComponent c) {
                JTree tree = (JTree) c;
                if(!(tree.getSelectionPath().getLastPathComponent() instanceof DesignElementTreeNode))
                    return null;
                DesignElementTreeNode node = (DesignElementTreeNode) tree.getSelectionPath().getLastPathComponent();
                return new StringSelection(":<dP0t4t0:3" + node.getTransferResponse());
            }
        });
    }
    
    static Icon scale(Icon icon, double scaleFactor, JTree tree) {
        int width = icon.getIconWidth();
        int height = icon.getIconHeight();

        width = (int) Math.ceil(width * scaleFactor);
        height = (int) Math.ceil(height * scaleFactor);

        BufferedImage image =
            new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = image.createGraphics();
        g.scale(scaleFactor, scaleFactor);
        icon.paintIcon(tree, g, 0, 0);
        g.dispose();

        return new ImageIcon(image);
    }

    private Icon getResizedImageIcon() {
        Image image = new ImageIcon(getClass().getResource("/Resources/circuit.png")).getImage();
        return new ImageIcon(image.getScaledInstance(15, 15, Image.SCALE_DEFAULT));
    }
}
