/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.NestedWatcher;

import GUI.Simulation.SimulationCanvas;
import GUI.Watcher.WatchModelEntry;
import GUI.Watcher.WatchModelEntryDataLog;
import VerilogCompiler.Interpretation.SimulationScope;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTreeTable;
import org.jdesktop.swingx.decorator.Highlighter;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.renderer.DefaultTableRenderer;
import org.jdesktop.swingx.renderer.StringValue;

/**
 *
 * @author Néstor A. Bermúdez < nestor.bermudezs@gmail.com >
 */
public class Debugger extends javax.swing.JInternalFrame {

    SimulationCanvas simulationCanvas;
    SimulationScope simulationScope;
    JXTreeTable table;
    CustomClocksChart customChart;
    CustomTreeModel currentDataModel;

    /**
     * Creates new form Debugger
     */
    public Debugger(SimulationCanvas simWin) {
        initComponents();
        simulationCanvas = simWin;
        simulationScope = simWin.simulationScope;
        currentDataModel = simWin.debuggerModel;
        table = new JXTreeTable(simWin.debuggerModel);
        this.customChart = new CustomClocksChart(this);
        simWin.clockEventManagement.setCustomClocksChart(this.customChart);
        Highlighter highligher = HighlighterFactory.createSimpleStriping(HighlighterFactory.LEDGER);
        table.setHighlighters(highligher);
        table.setAutoResizeMode(JXTreeTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        table.setShowGrid(true);
        table.setShowsRootHandles(true);
        configureCommonTableProperties(table);
        table.setTreeCellRenderer(new TreeTableCellRenderer());

        table.setVisible(true);
        scroll.getViewport().add(table);
        scroll1.getViewport().add(customChart.getCustomClocksChart());
        setVisible(true);
    }

    public void refresh() {
        simulationCanvas.parent.debuggerRefresh = false;
        if (table != null) {
            if(currentDataModel != null)
                currentDataModel.refresh();

            table.updateUI();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode)simulationCanvas.debuggerModel.getRoot();
            DefaultMutableTreeNode currentNode = root.getNextNode();
            if (currentNode != null) {
                do {
                    if (currentNode.getLevel() == 1) {
                        table.expandPath(new TreePath(currentNode.getPath()));
                    }
                    currentNode = currentNode.getNextNode();
                } while (currentNode != null);
            }            
        }
    }
    
    public JScrollPane getCustomChartScrollPane(){
        return this.scroll1;
    }

    private void configureCommonTableProperties(JXTable table) {
        table.setColumnControlVisible(true);
        StringValue toString = new StringValue() {
            @Override
            public String getString(Object value) {
                if (value instanceof Point) {
                    Point p = (Point) value;
                    return createString(p.x, p.y);
                } else if (value instanceof Dimension) {
                    Dimension dim = (Dimension) value;
                    return createString(dim.width, dim.height);
                }
                return "";
            }

            private String createString(int width, int height) {
                return "(" + width + ", " + height + ")";
            }
        };
        TableCellRenderer renderer = new DefaultTableRenderer(toString);
        table.setDefaultRenderer(Point.class, renderer);
        table.setDefaultRenderer(Dimension.class, renderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteAll = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        scroll = new javax.swing.JScrollPane();
        scroll1 = new javax.swing.JScrollPane();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);

        deleteAll.setText("Delete All Variables");
        deleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerLocation(370);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setLeftComponent(scroll);
        jSplitPane1.setRightComponent(scroll1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteAll)
                .addContainerGap(367, Short.MAX_VALUE))
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllActionPerformed
        ((CustomTreeModel) (table.getTreeTableModel())).clear();
        table.updateUI();
    }//GEN-LAST:event_deleteAllActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteAll;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll1;
    // End of variables declaration//GEN-END:variables

    public void saveVariablesIfNeeded(ArrayList<WatchModelEntry> modelData) {
        this.customChart.saveVariablesIfNeeded(modelData);
    }

    void changeLogWatchEntries(List<WatchModelEntryDataLog> entries) {
        if(this.currentDataModel == null)
            return;
        this.currentDataModel.changeCurrentLogEntries(entries, true);
    }
}
